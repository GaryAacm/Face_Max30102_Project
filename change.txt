#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include "max30102.h"

MAX30102::MAX30102(const char *device, uint8_t tcaAddress, uint8_t maxAddress)
    : device(device), tcaAddress(tcaAddress), maxAddress(maxAddress)
{
    for (int i = 0; i <= 7; i++)
    {
        // 构建 i2cset 命令以设置通道
        char command[128];
        snprintf(command, sizeof(command), "i2cset -y 4 0x%02x 0x00 0x%02x", tcaAddress, 1 << i);

        // 执行 i2cset 命令
        if (system(command) != 0)
        {
            std::cerr << "Failed to set channel " << i << " using i2cset." << std::endl;
            continue;
        }

        // 打开 I2C 总线
        fd = open(device, O_RDWR);
        if (fd < 0)
        {
            perror("Failed to open the I2C bus");
            continue;
        }

        // 设置 MAX30102 的 I2C 地址
        if (ioctl(fd, I2C_SLAVE, maxAddress) < 0)
        {
            std::cerr << "Failed to access device at address 0x" << std::hex << (int)maxAddress << " on channel " << i << std::endl;
            close(fd);
            continue;
        }

        // 检测设备是否存在
        uint8_t buf;
        if (read(fd, &buf, 1) >= 0)
        {
            std::cout << "Device found at address 0x" << std::hex << (int)maxAddress << " on channel " << i << std::endl;
            enable_channels[count_channel++] = i;
            max30102_init(); // 初始化设备
        }

        close(fd); // 关闭文件描述符
    }
}

MAX30102::~MAX30102()
{
    close(fd);
}
